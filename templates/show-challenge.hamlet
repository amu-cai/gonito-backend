<p> Git repo URL: <tt>#{repoUrl repo}</tt> / Branch: <tt> #{repoBranch repo}</tt>
$maybe repoLink  <- maybeRepoLink
  Browse at <tt><a href="#{repoLink}">#{repoLink}</a></tt>
$nothing

$if (challengeArchived challenge == Just True)
  <p><b>_{MsgChallengeIsArchived}

$if (checkIfAdmin mUserEnt)
  $if (challengeArchived challenge /= Just True)
    <form method=post action=@{ArchiveR challengeId}#form enctype="text/plain">
      <button>_{MsgArchive}
    <form method=get action=@{ChallengeUpdateR challengeId}#form enctype="text/plain">
      <button>_{MsgUpdate}

 $if (challengeArchived challenge == Just True)
    <form method=post action=@{UnarchiveR challengeId}#form enctype="text/plain">
      <button>_{MsgUnarchive}

 $if not isHealthy
     _{MsgChallengeNotHealthy} <form method=post action=@{HealR challengeId}#form enctype="text/plain">
         <button>_{MsgHeal}


<h2>Leaderboard

^{Table.buildBootstrap (leaderboardTable mUserId (challengeName challenge) scheme challengeRepo tests) leaderboardWithRanks}

$maybe altLeaderboardWithRanks <- mAltLeaderboardWithRanks
  $maybe altTests <- mAltTests
    ^{Table.buildBootstrap (altLeaderboardTable mUserId (challengeName challenge) scheme challengeRepo altTests) altLeaderboardWithRanks}
  $nothing
$nothing

<div id="graph-container">

<script src="/static/js/sigma.min.js">
<script src="/static/js/sigma.parsers.json.min.js">

^{paramGraphsWidget challenge tests params}