<h1>Challenge How To

<h2>Install GEval (recommended, but not obligatory)

<h4>option A — install GEval with Haskell Stack (needs some time and a couple of gigabytes of hard disk space)

<p>In order to evaluate your work locally, you need the GEval tool. First, install <a href="https://docs.haskellstack.org/en/stable/README/">Haskell Stack</a>:

<pre>
  curl -sSL https://get.haskellstack.org/ | sh

<p>and then install GEval itself:

<pre>
  git clone git://gonito.net/geval
  cd geval
  stack setup
  stack install
  ~/.local/bin/geval --help

<h4>option B — just download the GEval binary (simpler if you have a standard 64-bit Linux)

<pre>
  wget <a href="https://gonito.net/get/bin/geval">https://gonito.net/get/bin/geval</a>
  chmod u+x geval
  ./geval --help

<p>(GEval will make your life easier, but is not obligatory, so if you have any trouble with installing/running GEval, you can skip this step, for the time being.)

<h2>Get your repo

$case (appRepoScheme settings)
 $of SelfHosted
  $if not isIDSet || not isSSHUploaded
    <p>You need to
       $if not isIDSet
          \ set up your ID
          $if not isSSHUploaded
            \ and
       $if not isSSHUploaded
          \ upload your SSH public key
       \ (see <a href="@{YourAccountR}">your account</a>) if you want to have a repo hosted on Gonito.net, then:

  <pre>
    git clone --single-branch #{appRepoHost settings}#{shownId}/#{challengeName challenge}

  <p>(Warning about empty repository is expected, don't worry about it.)

  <pre>
    cd #{challengeName challenge}
    git pull #{appRepoHost settings}#{challengeName challenge}

  <p>(Alternatively, you can use any other Git repo, e.g. GitLab, make sure Gonito.net has access to your repo.)
 $of Branches
    <p>Clone the repo:

    <pre>
      git clone --single-branch #{repoUrl repo}

    $maybe gitAnnexRemote <- (repoGitAnnexRemote repo)
      <pre>
        git annex init
        git annex initremote storage #{gitAnnexRemote}
        git annex get --from storage

    <p>Switch to some branch, let's say <tt>my-brilliant-solution</tt>:

    <pre>
      git checkout -b my-brilliant-solution

<h2>Work on your solution

<p>You need to generate your solution for the test set as <tt>test-A/out.tsv</tt>. You may also generate the solution for the dev set (<tt>dev-0/out.tsv</tt>).

<p>You can evaluate results for the dev set locally:

<pre>
  cd #{challengeName challenge}
  geval --test-name dev-0

<h2>Push your solution to the git repo

<p>Commit and push <tt>out.tsv</tt> files to your repo. It is also recommended to push your source codes along with <tt>out.tsv</tt> files.

<pre>
  cd #{challengeName challenge}
  git add foo.py build.sh # add your source codes

$if isJust (repoGitAnnexRemote repo)
  <pre>
    # if your output files are large or if they should not pushed to the regular repo (e.g. contain sensitive information):
    git annex add dev-0/out.tsv test-A/out.tsv
    git annex copy --to storage
    # otherwise (e.g. they are just class labels), add the output files in a regular manner:
    git add dev-0/out.tsv test-A/out.tsv
$else
  <pre>
    git add dev-0/out.tsv test-A/out.tsv # add your output files

<pre>
  git commit -m 'my brilliant solution'

$case (appRepoScheme settings)
  $of SelfHosted
    <pre>
      git push origin master
    <h3>Repos hosted on Gonito.net
    <p>If you use a repo hosted here, a submission and evaluation is triggered automatically. You'll see the evaluation results in your console while pushing.
  $of Branches
    <pre>
      git push origin my-brilliant-solution:my-brilliant-solution

<h3>External repos

<p>If you use an external repo (e.g. at your own of Gitolite or at GitLab/GitHub), you can configure a webhook.
$maybe token <- mToken
   <p>Your webook is:
   <pre>
     wget --timeout=0 --quiet -O - '#{appRoot settings}/trigger-remotely' --post-data 'token=#{token}&branch=#{myBranch}&challenge=#{challengeName challenge}&url=URL_TO_YOUR_REPO'

<h3>Manual submission

<p>In case other methods fail, you can submit your solution manually — go to the <a href="@{ChallengeSubmissionR $ challengeName challenge}">submit form</a>.

<h2>Submission metadata

<p>Gonito can take the metadata (description, tags, parameters) of a submission from a number of sources (in order of precedence):

<ol>
  <li>the YAML files specified in the <tt>param-files</tt> field of the <tt>gonito.yaml</tt> file
     <ul>
       <li>only applicable for parameters,
       <li><tt>gonito.yaml</tt> will be always skipped even if matches a mask given in the <tt>param-files</tt> field,
       <li>parameters blacklisted in the <tt>unwanted-params</tt> field of the <tt>gonito.yaml</tt> file will be discarded;
  <li><tt>gonito.yaml</tt> file committed to the repository
     <ul>
       <li>description given in the <tt>description</tt> field,
       <li>tags given in <tt>tags</tt> field,
       <li>parameters given in <tt>params</tt> field,
  <li>names of output files (only for parameters)
     <ul>
       <li>e.g. if the output file is <tt>out-epochs=10,learning-rate=0.01.tsv</tt>, then parameters <i>epochs</i>=10 and <i>learning-rare</i>=0.01 will be extracted;
  <li>submission form (when submitting manually);
  <li>git commit message
     <ul>
       <li>description taken from the first paragraph
       <li>tags taken from a line starting with <tt>tags:</tt>

<p>Here is an example of <tt>gonito.yaml</tt>, in which all metadata could be given:

<pre>
  description: This my brilliant solution
  tags:
  \  - neural-network
  \  - left-to-right
  params:
  \  epochs: 10
  \  learning-rate: 0.01
  unwanted-params:
  \  - model-file
  \  - vocab-file
  param-files:
  \  - "*.yaml"
  \  - config/*.yaml

<p>It might seem a little bit complicated, but you could simply use the method which is the most convenient for you.
